---
title: "Spatial data operations"
format: html
editor_options: 
  chunk_output_type: console
---

<https://r.geocompx.org/spatial-operations>

```{r}
library(sf)
library(terra)
library(dplyr)
library(spData)
```

## Vector data

### Spatial subsetting
 
 **x[y, , op = st_intersects]**
 
 * x - an SF object from which a subset of rows will be returned
 * y - a subsetting object
 * op - argument specifing topological relation, *st_intersect* by default. Binary predicate
 
 `x` and `y` must be SF or SFC objects. The result is also SF object. 
 
 tidyverse filter() is also valid.
 
```{r}
canterbury = nz |> filter(Name=="Canterbury")
canterbury_height = nz_height[canterbury,]
other_height = nz_height[canterbury, , op=st_disjoint]

par(mfrow=c(1,3))

plot(nz$geom,, main="all")
plot(canterbury$geom,add=T,col="grey")
plot(nz_height$geometry,add=T,col="green")

plot(nz$geom,, main="canterbury")
plot(canterbury$geom,add=T,col="grey")
plot(canterbury_height$geometry,add=T,col="red")

plot(nz$geom,, main="other")
plot(canterbury$geom,add=T,col="grey")
plot(other_height$geometry,add=T,col="blue")

par(mfrow=c(1,1))
```
 
Sparse geometry binary predicate
```{r}
sel_sgbp = st_intersects(x=nz_height,y=canterbury)
class(sel_sgbp)
sel_sgbp
sel_logical = lengths(sel_sgbp) > 0
canterbury_height2= nz_height[sel_logical,]
identical(canterbury_height,canterbury_height2)
```

Tidyverse
```{r}
canterbury_height3 = nz_height |>
  st_filter(y=canterbury,.predicate= st_intersects)

identical(canterbury_height,canterbury_height3)
```

### Topological relations
*Binary topological relations* - logical statements about spatial relationships between two objects

[![Topological relations](relations-1.png)](https://r.geocompx.org/spatial-operations#topological-relations)

```{r}
polygon_matrix = cbind(
  x=c(0,0,1,1  ,0),
  y=c(0,1,1,0.5,0)
)
polygon_sfc = st_sfc(st_polygon(list(polygon_matrix)))

line_sfc= st_sfc(st_linestring(
  cbind(
    x=c(0.4,1),
    y=c(0.2,0.5)
  )
))
point_df = data.frame(
  x=c(0.2,0.7,0.4),
  y=c(0.1,0.2,0.8)
)
point_sf = st_as_sf(point_df,coords=c("x","y"))

plot(polygon_sfc,axes=T,col="grey")
plot(line_sfc,add=T,lwd=3,col="black")
plot(point_sf,add=T,col="blue",cex=1.5)
text(point_df$x,point_df$y,c("1","2","3"),cex=1,pos=4,col="blue")
```

```{r}
st_intersects(point_sf, polygon_sfc)
st_intersects(point_sf, polygon_sfc,sparse=F)

plot(polygon_sfc,col="grey",axes=T,main="sf_intersects")
plot(point_sf[polygon_sfc,,op=st_intersects],add=T,col="red",cex=1.5)
```
Intersects is a ‘catch-all’ topological operation which identifies many types of spatial relation.

```{r}
st_within(point_sf, polygon_sfc)
plot(polygon_sfc,col="grey",axes=T,main="sf_within")
plot(point_sf[polygon_sfc,,op=st_within],add=T,col="red",cex=1.5)

st_touches(point_sf, polygon_sfc)
plot(polygon_sfc,col="grey",axes=T,main="sf_touches")
plot(point_sf[polygon_sfc,,op=st_touches],add=T,col="red",cex=1.5)

x=st_disjoint(point_sf,polygon_sfc,sparse=F)
plot(polygon_sfc,col="grey",axes=T,main="sf_disjoint")
plot(point_sf[x[,1],],add=T,col="red",cex=1.5)

buffer= 0.1
polygon_sfc2= st_buffer(polygon_sfc,buffer)
x=st_is_within_distance(point_sf,polygon_sfc,dist=buffer,sparse=F)
plot(polygon_sfc2,axes=T,main="sf_is_within_distance")
plot(polygon_sfc,add=T,col="grey")
plot(point_sf[x[,1],],add=T,col="red",cex=1.5)
plot(point_sf[!x[,1],],add=T,col="blue",cex=1.5)
```

### Distance relation
**Continuous** topological relations - distance spatial relationships between two objects.

```{r}

nz_highest = nz_height|>slice_max(n=1,order_by = elevation)
canterbury_centroid= st_centroid(canterbury)
st_distance(nz_highest,canterbury_centroid)

```
Distance has **units**.

```{r}
co = filter(nz, grepl("Canter|Otag", Name))
st_distance(nz_height[1:3, ], co)

```
st_distance - distance to **any** part of the polygon.

```{r}
plot(nz$geom)
plot(st_geometry(co),add=T,col="grey")
plot(st_geometry(nz_height)[1:3], add = TRUE,col="blue")
```

### DE-9IM strings
Dimensionally Extended 9-Intersection Model (DE-9IM) - basis of binary predicates (topological relations).
*“dimension of the intersections of boundaries, interiors, and exteriors of two features”.*
DE-9IM is applicable to 2-dimensional objects (points, lines and polygons) in Euclidean space, meaning that the model (and software implementing it such as GEOS) assumes you are working with data in a projected coordinate reference system.


```{r}
xy2sfc = function(x, y) st_sfc(st_polygon(list(cbind(x, y))))
x = xy2sfc(x = c(0, 0, 1, 1, 0), y = c(0, 1, 1, 0.5, 0))
y = xy2sfc(x = c(0.7, 0.7, 0.9, 0.7), y = c(0.8, 0.5, 0.5, 0.8))

plot(x,axes=T,main=paste0("DE-9IM string: ",st_relate(x, y)))
plot(y,add=T,col="grey")

```

st_relate - Compute DE9-IM relation between pairs of geometries, or match it to a given pattern

* Queen relation - polygons share a border, `pattern="F***T****"`
* Rook relation - polygons share a point, `pattern = "F***1****"`

```{r}
st_queen = function(x, y) st_relate(x, y, pattern = "F***T****")
st_rook = function(x, y) st_relate(x, y, pattern = "F***1****")

grid = st_make_grid(x, n = 3)
grid_sf = st_sf(grid)
grid_sf$queens = lengths(st_queen(grid, grid[5])) > 0
grid_sf$rooks = lengths(st_rook(grid, grid[5])) > 0

plot(grid_sf)

```

### Spatial joining

Joining on spatial data relies on spatial relations.
`st_join(
  x,
  y,
  join = st_intersects,
  ...,
  suffix = c(".x", ".y"),
  left = TRUE, # FALSE = inner join
  largest = FALSE
)
`

```{r}
set.seed(2018)
bb=st_bbox(world)
random_df = data.frame(
  x=runif(n=10,min=bb[1],max = bb[3]),
  y=runif(n=10,min=bb[2],max = bb[4])
)

random_points = random_df |> st_as_sf(coords = c("x","y"),crs="EPSG:4326")
```


```{r}
world_random = world[random_points,]
world_random |> count(name_long)

random_joined = st_join(random_points,world["name_long"]) |>
  mutate(name_long = coalesce(name_long,"missing"))


plot(world$geom)
plot(random_points,add=T,col="lightblue",pch=4,cex=2,lwd=3)

plot(world$geom)
plot(world_random[,"name_long"],add=T)

plot(world$geom)
plot(random_joined,add=T,pch=4,cex=2,lwd=3)

```

### Distance based joining
Sometimes two geographic datasets do not intersect but still have a strong geographic relationship due to their proximity.
```{r}
plot(st_geometry(cycle_hire), col = "blue")
plot(st_geometry(cycle_hire_osm), add = TRUE, pch = 3, col = "red")

any(st_intersects(cycle_hire, cycle_hire_osm, sparse = FALSE))

```

```{r}
sel = st_is_within_distance(cycle_hire,cycle_hire_osm,dist=units::set_units(20,"m"))

summary(lengths(sel)>0)

z = st_join(cycle_hire,cycle_hire_osm,st_is_within_distance,
            dist=units::set_units(20,"m"))
nrow(cycle_hire)
nrow(z)

z = z|>
  group_by(id)|>
  summarise(capacity=mean(capacity))

nrow(z)

plot(cycle_hire_osm["capacity"])
plot(z["capacity"])

```

### Spatial aggregation
The geography of the grouping variable is preserved.

```{r}
nz_agg = aggregate(x = nz_height, by = nz, FUN = mean)
identical(st_geometry(nz_agg),st_geometry(nz))

plot(nz_agg[,"elevation"],main="base R")

nz_agg2= st_join(nz,nz_height) |>
  group_by(Name) |>
  summarize(elevation=mean(elevation,na.rr=T))

plot(nz_agg2[,"elevation"],main="tidyverse")

```


### Joining incongruent layers
Spatial congruence is an important concept related to spatial aggregation. An aggregating object (which we will refer to as y) is congruent with the target object (x) if the two objects have shared borders. Often this is the case for administrative boundary data, whereby larger units — such as Middle Layer Super Output Areas (MSOAs) in the UK or districts in many other European countries — are composed of many smaller units.

![Congruent vs Incongruent](areal-example-1.png) 

Area weighted spatial interpolation - solution to incongruent aggregation.
`st_interpolate_aw(x, # object of class sf, for which we want to aggregate attributes
to, # object of class sf or sfc, with the target geometries
extensive, # TRUE ->  sum, FALSE -> mean 
...)`
```{r}

plot(incongruent["value"])
plot(st_geometry(aggregating_zones),add=T,lwd=3)

iv = incongruent["value"] # keep only the values to be transferred
agg_aw = st_interpolate_aw(iv, aggregating_zones, extensive = TRUE)
#> Warning in st_interpolate_aw.sf(iv, aggregating_zones, extensive = TRUE):
#> st_interpolate_aw assumes attributes are constant or uniform over areas of x
agg_aw$value
#> [1] 19.6 25.7
```

## Exercises

```{r}

canterbury = nz |> filter(Name=="Canterbury")
plot(st_geometry(nz))
plot(canterbury,add=T,col="yellow")
plot(nz_height[canterbury,"geometry"],pch=7,col="red",add=T)
plot(nz_height[canterbury,"geometry",op=st_disjoint],pch=1,col="blue",add=T)

```

```{r}
nz2 = st_join(
  nz,
  nz_height,
  join=st_intersects
) |>
  group_by(Name) |>
  summarize(N=n())
plot(nz2[,"N"])

nz2 |>
  st_drop_geometry()|>
  arrange(desc(N))
```

```{r}
colorado = us_states |> filter(NAME=="Colorado")

intersect = st_intersects(colorado,us_states)

plot(st_geometry(us_states))
plot(us_states[colorado,"geometry"],add=T,col="blue")
plot(colorado$geometry,add=T,col="red")

```

```{r}

colorado_borders = us_states[colorado,,op=st_touches]
plot(st_geometry(us_states))
plot(colorado_borders["geometry"],add=T,col="blue")

st_queen = function(x, y) st_relate(x, y, pattern = "F***T****")
colorado_borders2 = us_states[colorado,,op=st_queen]
plot(st_geometry(us_states))
plot(colorado_borders2["geometry"],add=T,col="yellow")
```

```{r}

dc_centr = us_states|>
  filter(NAME=="District of Columbia") |>
  st_centroid()
cali_centr = us_states|>
  filter(NAME=="California") |>
  st_centroid()

us_line = st_union(dc_centr,cali_centr) |>
  st_cast(to="LINESTRING")

sel_states = us_states[us_line,]

plot(us_states$geometry)
plot(sel_states["NAME"],add=T)
plot(us_line$geometry,add=T,col="red",lwd=2)


```

