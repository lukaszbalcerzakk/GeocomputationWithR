---
title: "Attibute data operations"
format: html
editor_options: 
  chunk_output_type: console
---

<https://r.geocompx.org/attr>

```{r}
library(sf)      # vector data package introduced in Chapter 2
library(terra)   # raster data package introduced in Chapter 2
library(tidyverse)   # tidyverse package for data frame manipulation
library(spData)  # spatial data package introduced in Chapter 2
```

## Vector attribute manipulation

### Basic operations
```{r}
class(world)
dim(world)

```

Remove geometry
```{r}
world_df = st_drop_geometry(world)
class(world_df)
dim(world_df)
```

Vector attribute subsetting preserves the geometry column

* base R subsetting works
  + [], subset()
* tidyverse subsetting works
  + select(), filter()
  
But **pull()** or **$** operator return single attribute, droping geometry data


### Vector atribute aggregation

Tidyverse group_by() and summarize() keep geometry column (and apparently performs sf_union??). 
```{r}

world_agg4  = world |> 
  group_by(continent) |> 
  summarize(Pop = sum(pop, na.rm = TRUE), Area = sum(area_km2), N = n())

class(world_agg4)
world_agg4
```

```{r}
world_agg5 = world |> 
  st_drop_geometry() |>                      # drop the geometry for speed
  select(pop, continent, area_km2) |> # subset the columns of interest  
  group_by(continent) |>                     # group by continent and summarize:
  summarize(Pop = sum(pop, na.rm = TRUE), Area = sum(area_km2), N = n()) |>
  mutate(Density = round(Pop / Area)) |>     # calculate population density
  slice_max(Pop, n = 3) |>                   # keep only the top 3
  arrange(desc(N))                           # arrange in order of n. countries

world_agg5
```

### Vector attirbute joins
```{r}
world_coffee = left_join(world, coffee_data)
#> Joining with `by = join_by(name_long)`
class(world_coffee)
#> [1] "sf"         "tbl_df"     "tbl"        "data.frame"
```

```{r}
plot(world_coffee[,c("coffee_production_2016","coffee_production_2017")])
```

The direction of join **matters**.

* join(sf, df) --> simple feature object
* join(df, sf) --> regular data.frame object

```{r}
coffee_world = left_join(coffee_data, world)
#> Joining with `by = join_by(name_long)`
class(coffee_world)
#> [1] "tbl_df"     "tbl"        "data.frame"
```

Creating, modifing, dropping attributes preserves geometric column on SF object.

## Raster objects manipulation


```{r}

elev = rast(nrows=6, ncols=6,
            xmin= -1.5, xmax=1.5, ymin=-1.5, ymax=1.5,
            vals = 1:36)

grain_order = c("clay","silt","sand")
grain_char = sample(grain_order,36,replace=T)
grain_fact = factor(grain_char,levels=grain_order)
grain = rast(nrows=6,ncols=6,
             xmin=-1.5,xmax=1.5,ymin=-1.5,ymax=1.5,
             vals=grain_fact)

str(grain)
cats(grain)

grain2=grain
levels(grain2)
levels(grain2)= data.frame(value = c(0, 1, 2), wetness = c("wet", "moist", "dry"))

plot(elev)
plot(grain)
plot(grain2)

```


Raster Subsetting
```{r}

# top left pixel
# row-column index
elev[1,1]

# cell ID
elev[1]

two_layers = c(grain, elev)
plot(two_layers)

two_layers[1]
```

Get all values
```{r}

elev[]

values(elev)

```


Set values
```{r}
elev[c(1,3), c(1, 2)]
elev[c(1,3), c(1, 2)] = 0

plot(elev)
```

### Summarizing raster objects
Think about rasters as if they are just vectors of numeric or factor data type.

```{r}

summary(elev)
summary(grain)
```

Global() function
```{r}
global(elev, sd)

```

Freq() function
```{r}
freq(grain)
```

Other fns
```{r}
hist(elev)
density(elev)

```


## Exercises

```{r}
data(us_states)
data(us_states_df)
```

```{r}
str(us_states)
us_states_name = us_states |> select(NAME)
class(us_states_name)
```

```{r}
us_states |>
  select(starts_with("total"))|>
  plot()

us_states |>
  mutate(area2=units::set_units(st_area(geometry),km^2)) |>
  filter(as.numeric(area2)<250000 & total_pop_15>5000000) |>
  plot()

```

```{r}
summary(us_states)
us_states |>
  st_drop_geometry()|>
  summarise(total_pop = sum(total_pop_15))

us_states |>
  st_drop_geometry()|>
  group_by(REGION)|>
  summarise(dist_c = n_distinct(NAME))

```

```{r}
str(us_states_df)
setdiff(us_states_df$state,us_states$NAME)

us_states_stats = us_states |> left_join(us_states_df,join_by(NAME==state))
str(us_states_stats)

```

```{r}
us_states|>
  mutate(area2=as.numeric(units::set_units(st_area(geometry),km^2)),
         density10 = (total_pop_10/1000)/area2,
         density15 = (total_pop_15/1000)/area2,
         delta = (density15/density10)-1)|>
  select(delta)|>
  plot()
```

```{r}

us_states_stats |>
  mutate(pow_pct10 = poverty_level_10/total_pop_10,
         pow_pct15 = poverty_level_15/total_pop_15,
         pow_delta = (pow_pct15/pow_pct10)-1)|>
  select(pow_delta)|>
  plot()

```


```{r}

freq(grain)

my_rast = rast(nrows=9, ncols=9,
            xmin= -2.5, xmax=2, ymin=-2.5, ymax=2,
            vals = 1:81)

plot(my_rast)

my_rast[c(1,9),c(1,9)] 

```

